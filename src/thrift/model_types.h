/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef model_TYPES_H
#define model_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace rpc {

struct e_job_state {
  enum type {
    WAITING = 0,
    RUNNING = 1,
    SUCCEDED = 2,
    FAILED = 3
  };
};

extern const std::map<int, const char*> _e_job_state_VALUES_TO_NAMES;

typedef int16_t integer;

typedef std::vector<integer>  v_job_ids;

typedef std::vector<class t_job>  v_jobs;


class t_node {
 public:

  static const char* ascii_fingerprint; // = "52F7D5E8217C4B8FC14F1F30BF2EB41C";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xF7,0xD5,0xE8,0x21,0x7C,0x4B,0x8F,0xC1,0x4F,0x1F,0x30,0xBF,0x2E,0xB4,0x1C};

  t_node() : name(""), domain_name(""), weight(0) {
  }

  virtual ~t_node() throw() {}

  std::string name;
  std::string domain_name;
  integer weight;

  bool operator == (const t_node & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(domain_name == rhs.domain_name))
      return false;
    if (!(weight == rhs.weight))
      return false;
    return true;
  }
  bool operator != (const t_node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const t_node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class t_job {
 public:

  static const char* ascii_fingerprint; // = "4FC4D397B4D482A141E3F5D87343C3BE";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0xC4,0xD3,0x97,0xB4,0xD4,0x82,0xA1,0x41,0xE3,0xF5,0xD8,0x73,0x43,0xC3,0xBE};

  t_job() : start_time(0), stop_time(0), return_code(0), id(0), name(""), node_name(""), domain(""), cmd_line(""), weight(0) {
  }

  virtual ~t_job() throw() {}

  int64_t start_time;
  int64_t stop_time;
  integer return_code;
  e_job_state::type state;
  integer id;
  std::string name;
  std::string node_name;
  std::string domain;
  std::string cmd_line;
  integer weight;
  v_job_ids prv;
  v_job_ids nxt;

  bool operator == (const t_job & rhs) const
  {
    if (!(start_time == rhs.start_time))
      return false;
    if (!(stop_time == rhs.stop_time))
      return false;
    if (!(return_code == rhs.return_code))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(node_name == rhs.node_name))
      return false;
    if (!(domain == rhs.domain))
      return false;
    if (!(cmd_line == rhs.cmd_line))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (!(prv == rhs.prv))
      return false;
    if (!(nxt == rhs.nxt))
      return false;
    return true;
  }
  bool operator != (const t_job &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const t_job & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class t_hello {
 public:

  static const char* ascii_fingerprint; // = "7F21FB535884165D6350077C7B970E93";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x21,0xFB,0x53,0x58,0x84,0x16,0x5D,0x63,0x50,0x07,0x7C,0x7B,0x97,0x0E,0x93};

  t_hello() : domain(""), name(""), is_master(0) {
  }

  virtual ~t_hello() throw() {}

  std::string domain;
  std::string name;
  bool is_master;

  bool operator == (const t_hello & rhs) const
  {
    if (!(domain == rhs.domain))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(is_master == rhs.is_master))
      return false;
    return true;
  }
  bool operator != (const t_hello &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const t_hello & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class t_route {
 public:

  static const char* ascii_fingerprint; // = "8F79B413CBA2C751FFAA9ADAD3083A49";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x79,0xB4,0x13,0xCB,0xA2,0xC7,0x51,0xFF,0xAA,0x9A,0xDA,0xD3,0x08,0x3A,0x49};

  t_route() : hops(0) {
  }

  virtual ~t_route() throw() {}

  t_node destination_node;
  integer hops;

  bool operator == (const t_route & rhs) const
  {
    if (!(destination_node == rhs.destination_node))
      return false;
    if (!(hops == rhs.hops))
      return false;
    return true;
  }
  bool operator != (const t_route &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const t_route & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _e_routing__isset {
  _e_routing__isset() : msg(false) {}
  bool msg;
} _e_routing__isset;

class e_routing : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  e_routing() : msg("") {
  }

  virtual ~e_routing() throw() {}

  std::string msg;

  _e_routing__isset __isset;

  bool operator == (const e_routing & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const e_routing &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const e_routing & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _e_job__isset {
  _e_job__isset() : msg(false) {}
  bool msg;
} _e_job__isset;

class e_job : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  e_job() : msg("") {
  }

  virtual ~e_job() throw() {}

  std::string msg;

  _e_job__isset __isset;

  bool operator == (const e_job & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const e_job &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const e_job & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _e_node__isset {
  _e_node__isset() : msg(false) {}
  bool msg;
} _e_node__isset;

class e_node : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  e_node() : msg("") {
  }

  virtual ~e_node() throw() {}

  std::string msg;

  _e_node__isset __isset;

  bool operator == (const e_node & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const e_node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const e_node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _e_planning__isset {
  _e_planning__isset() : msg(false) {}
  bool msg;
} _e_planning__isset;

class e_planning : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  e_planning() : msg("") {
  }

  virtual ~e_planning() throw() {}

  std::string msg;

  _e_planning__isset __isset;

  bool operator == (const e_planning & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const e_planning &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const e_planning & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
