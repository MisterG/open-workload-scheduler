// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ows_rpc.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace rpc;

class ows_rpcHandler : virtual public ows_rpcIf {
 public:
  ows_rpcHandler() {
    // Your initialization goes here
  }

  void hello(t_hello& _return, const t_node& target_node) {
    // Your implementation goes here
    printf("hello\n");
  }

  void reach_master(t_route& _return) {
    // Your implementation goes here
    printf("reach_master\n");
  }

  bool add_node(const std::string& running_node, const t_node& node) {
    // Your implementation goes here
    printf("add_node\n");
  }

  void get_jobs(v_jobs& _return, const std::string& running_node) {
    // Your implementation goes here
    printf("get_jobs\n");
  }

  bool add_job(const t_job& j) {
    // Your implementation goes here
    printf("add_job\n");
  }

  bool remove_job(const t_job& j) {
    // Your implementation goes here
    printf("remove_job\n");
  }

  bool update_job_state(const t_job& j, const e_job_state::type js) {
    // Your implementation goes here
    printf("update_job_state\n");
  }

  void sql_exec(const std::string& query) {
    // Your implementation goes here
    printf("sql_exec\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ows_rpcHandler> handler(new ows_rpcHandler());
  shared_ptr<TProcessor> processor(new ows_rpcProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

